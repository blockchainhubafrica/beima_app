// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// import "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol";
// import "./PensionServiceProvider.sol";

// contract MockKeeper  {

//     bool upKeepPerformed;
//     bool upkeepChecked;
//     PensionServiceProvider public provider;


//     constructor(address _provider)  {
//         provider = PensionServiceProvider(_provider);
    
//     }

//     function check() public returns(bool)  {
//         // chekupKeep
//         (bool success, ) = provider.checkUpkeep("0x");
//         require (success, "Up Keep not performed");
//         upkeepChecked = true;

//         return upkeepChecked;
        
//     }

//     function perform(bytes calldata data) public returns(bool) {
//         provider.performUpkeep(data);
//         // require (success, "Up Keep not performed");
//         upKeepPerformed = true;

//         return upKeepPerformed;
        
//         // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
//     }
// }